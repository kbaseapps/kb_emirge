# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class kb_emirge(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://kbase.us/services/authorization/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def run_emirge(self, input_params, context=None):
        """
        :param input_params: instance of type "run_emirge_Input"
           (run_emirge() ** ** to backend a KBase App, potentially operating
           on ReadSets) -> structure: parameter "input_ws" of type
           "workspace_name" (** Common types), parameter "input_reads_ref" of
           type "data_obj_ref", parameter "output_ws" of type
           "workspace_name" (** Common types), parameter "output_reads_name"
           of type "data_obj_name"
        :returns: instance of type "run_emirge_Output" -> structure:
           parameter "report_name" of String, parameter "report_ref" of String
        """
        return self._client.call_method(
            'kb_emirge.run_emirge',
            [input_params], self._service_ver, context)

    def exec_emirge(self, input_params, context=None):
        """
        :param input_params: instance of type "exec_emirge_Input"
           (exec_emirge() ** ** the local method that runs EMIRGE on each
           read library) -> structure: parameter "input_reads_ref" of type
           "data_obj_ref", parameter "output_ws" of type "workspace_name" (**
           Common types), parameter "output_reads_name" of type
           "data_obj_name"
        :returns: instance of type "exec_emirge_Output" -> structure:
           parameter "output_sequences_ref" of type "data_obj_ref", parameter
           "report" of String
        """
        return self._client.call_method(
            'kb_emirge.exec_emirge',
            [input_params], self._service_ver, context)

    def exec_emirge_SingleLibrary(self, input_params, context=None):
        """
        :param input_params: instance of type "exec_emirge_Input"
           (exec_emirge() ** ** the local method that runs EMIRGE on each
           read library) -> structure: parameter "input_reads_ref" of type
           "data_obj_ref", parameter "output_ws" of type "workspace_name" (**
           Common types), parameter "output_reads_name" of type
           "data_obj_name"
        :returns: instance of type "exec_emirge_Output" -> structure:
           parameter "output_sequences_ref" of type "data_obj_ref", parameter
           "report" of String
        """
        return self._client.call_method(
            'kb_emirge.exec_emirge_SingleLibrary',
            [input_params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('kb_emirge.status',
            [], self._service_ver, context)
